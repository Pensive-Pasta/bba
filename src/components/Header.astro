---
import Logo from "./Logo.astro";
import ArrowUpRight from "../assets/icons/arrow-up-right.svg";

const navItems = [
  { name: "Projects", url: "/projects", color: "text-orange" },
  { name: "Practice", url: "/practice", color: "text-green" },
  { name: "Insights", url: "/insights", color: "text-yellow" },
  { name: "Contact", url: "/contact", color: "text-pink" },
];

const routeThemes = [
  { test: /^\/projects/, bg: "bg-orange", fill: "fill-orange" },
  { test: /^\/practice/, bg: "bg-green", fill: "fill-green" },
  { test: /^\/insights/, bg: "bg-yellow", fill: "fill-yellow" },
  { test: /^\/contact/, bg: "bg-pink", fill: "fill-pink" },
];

const currentRoute = Astro.url.pathname;
const isHome = currentRoute === "/";
const isContact = currentRoute === "/contact";
const isArticle = currentRoute.startsWith("/projects/homes/");

const currentTheme = routeThemes.find((t) => t.test.test(currentRoute)) ?? {
  bg: "bg-primary",
  fill: "fill-primary",
};

const textColor = isHome || isContact || isArticle ? "text-primary" : "text-white";
---

<header
  id="site-header"
  class={`py-6 px-6 md:px-12 min-w-full fixed top-0 left-0 right-0 z-40 duration-300 ${
    textColor
  }`}
>
  <div class="flex justify-between items-center max-w-screen-2xl mx-auto">
    <a
      href="/"
      class="text-xl font-light tracking-tighter z-40 header-link text-current"
    >
      <span class="header-text">
        <Logo class="logo" />
      </span>
    </a>

    <button class="z-40 relative" id="menu-toggle" aria-label="Toggle menu">
      <div class="w-10 h-8 flex flex-col justify-between overflow-hidden">
        <span
          class="w-full h-1 transform transition-all duration-300 origin-left menu-line-1 bg-current"
        ></span>
        <span
          class="w-full h-1 transition-all duration-300 origin-center menu-line-2 bg-current"
        ></span>
        <span
          class="w-full h-1 transform transition-all duration-300 origin-left menu-line-3 bg-current"
        ></span>
      </div>
    </button>
  </div>

  <div
    class="nav-menu fixed inset-0 pt-24 px-6 md:px-12 h-screen w-screen z-30 hidden"
    id="nav-menu"
  >
    <div
      id="nav-bg"
      class={`fixed inset-0 -z-10 pointer-events-none overflow-hidden ${currentTheme.bg} bg-[url('/images/blue-lines.png')] bg-cover bg-center bg-blend-color-burn`}
    >
    </div>
    <div
      class="absolute inset-0 h-screen -z-10 pointer-events-none overflow-hidden"
    >
      <svg
        id="nav-fill-1"
        class={`absolute -top-[50%] md:-top-72 left-[25%] w-[600px] h-[600px] ${currentTheme.fill}`}
        viewBox="0 0 100 100"
      >
        <circle cx="50" cy="50" r="50"></circle>
      </svg>
      <svg
        id="nav-fill-2"
        class={`absolute hidden md:block top-[50%] -left-10 w-[200px] h-[200px] ${currentTheme.fill}`}
        viewBox="0 0 100 100"
      >
        <circle cx="50" cy="50" r="50"></circle>
      </svg>
      <svg
        id="nav-fill-3"
        class={`absolute top-[42%] -right-10 w-[200px] h-[200px] ${currentTheme.fill}`}
        viewBox="0 0 100 100"
      >
        <circle cx="50" cy="50" r="50"></circle>
      </svg>
      <circle cx="50" cy="50" r="50"></circle>
    </div>
    <svg
      id="nav-fill-4"
      class={`absolute top-[65%] right-6 w-[800px] h-[800px] ${currentTheme.fill}`}
      viewBox="0 0 100 100"
    >
      <circle cx="50" cy="50" r="50"></circle>
    </svg>
    <div
      class="flex flex-col h-full w-full text-white pt-36 md:pt-[30vh] md:ml-[15vw] lg:ml-[20vw] xl:ml-[25vw] 2xl:ml-[30vw]"
    >
      <div class="flex items-start gap-12 md:gap-32 flex-grow">
        <ul>
          {
            navItems.map((item) => (
              <li>
                <a
                  href={item.url}
                  data-bg={item.color.replace("text-", "bg-")}
                  data-fill={item.color.replace("text-", "fill-")}
                  class={`block text-3xl md:text-intro transition-all text-white transform duration-300 py-2
                  ${item.url !== currentRoute && item.color === "text-orange" ? "hover:translate-x-2 hover:fill-orange" : ""}
                  ${item.url !== currentRoute && item.color === "text-green" ? "hover:translate-x-2 hover:fill-green" : ""}
                  ${item.url !== currentRoute && item.color === "text-yellow" ? "hover:translate-x-2 hover:fill-yellow" : ""}
                  ${item.url !== currentRoute && item.color === "text-pink" ? "hover:translate-x-2 hover:fill-pink" : ""}
                  ${item.url === currentRoute ? "text-white" : ""}`}
                >
                  {item.name}
                </a>
              </li>
            ))
          }
        </ul>
        <ul class="font-light text-white space-y-2 mt-2">
          <li class="flex items-center gap-2">
            <a href="tel:+442012345678" class="transition-colors"
              >+44 (0) 1832 774 121</a
            >
            <ArrowUpRight class="w-6 h-6 mt-1" />
          </li>
          <li class="flex items-center gap-2">
            <a href="mailto:hello@wearebba.com" class="transition-colors"
              >hello@wearebba.co.uk</a
            >
            <ArrowUpRight class="w-6 h-6 mt-1" />
          </li>
          <li class="flex items-center gap-2">
            <a href="instagram.com" class="transition-colors">@wearebba </a>
            <ArrowUpRight class="w-6 h-6 mt-1" />
          </li>
        </ul>
      </div>
      <div class="mt-auto mb-12 z-10">
        <ul
          class="flex flex-col space-y-2 text-white transition-colors font-light"
        >
          <li>
            <a href="/cookies"> Cookies </a>
          </li>
          <li>
            <a href="/privacy"> Privacy Policy </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</header>

<script>
  const setupMobileMenu = () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("nav-menu");
    const body = document.body;
    const menuLine1 = document.querySelector(".menu-line-1");
    const menuLine2 = document.querySelector(".menu-line-2");
    const menuLine3 = document.querySelector(".menu-line-3");
    const logo = document.querySelector(".logo");

    if (!menuToggle || !mobileMenu) return;
    if (menuToggle.dataset.bound) return;
    menuToggle.dataset.bound = "true";

    const handleToggle = (e: { preventDefault: () => void }) => {
      e.preventDefault();
      mobileMenu.classList.toggle("hidden");
      body.classList.toggle("overflow-hidden");
      logo?.classList.toggle("text-white");
      logo?.classList.toggle("text-primary");

      menuLine1?.classList.toggle("rotate-45");
      menuLine1?.classList.toggle("translate-x-1");
      menuLine1?.classList.toggle("translate-y-[1px]");
      menuLine2?.classList.toggle("scale-x-0");
      menuLine3?.classList.toggle("-rotate-45");
      menuLine3?.classList.toggle("translate-x-1");
      menuLine1?.classList.toggle("!bg-white");
      menuLine2?.classList.toggle("!bg-white");
      menuLine3?.classList.toggle("!bg-white");
    };

    menuToggle.addEventListener("click", handleToggle);
    menuToggle.addEventListener("touchstart", handleToggle);
  };

  if (document.readyState !== "loading") {
    setupMobileMenu();
  } else {
    document.addEventListener("DOMContentLoaded", setupMobileMenu);
  }

  // Re-run on client-side navigation
  document.addEventListener("astro:page-load", setupMobileMenu);
</script>

<script>
  const setupScrollHeader = () => {
    const hero = document.getElementById("hero");
    const header = document.getElementById("site-header");

    if (!hero || !header) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          header.classList.add("text-white");
          header.classList.remove("text-primary");
          header.classList.add("bg-transparent");
          header.classList.remove("bg-white");
        } else {
          header.classList.add("text-primary");
          header.classList.remove("text-white");
          header.classList.add("bg-white");
          header.classList.remove("bg-transparent");
        }
      },
      {
        threshold: 0,
        rootMargin: `-${header.offsetHeight}px 0px 0px 0px`,
      }
    );

    observer.observe(hero);
  };

  if (document.readyState !== "loading") {
    setupScrollHeader();
  } else {
    document.addEventListener("DOMContentLoaded", setupScrollHeader);
  }

  document.addEventListener("astro:page-load", setupScrollHeader);
</script>

<script is:inline>
  /**
   * Hover‑swap nav theme (bg + fill) and restore the
   * active route’s colours. Runs on initial load and on
   * each Astro client navigation.
   */
  const initNavHover = () => {
    const bgEl = document.getElementById("nav-bg");
    const fillEls = Array.from(document.querySelectorAll("#nav-menu svg"));
    const navLinks = document.querySelectorAll(
      "#nav-menu a[data-bg][data-fill]"
    );

    if (!bgEl || fillEls.length === 0) return;

    // Runtime route‑to‑theme lookup (keeps colours correct after client navigation)
    const themeMap = {
      "/": { bg: "bg-primary", fill: "fill-primary" },
      "/projects": { bg: "bg-orange", fill: "fill-orange" },
      "/practice": { bg: "bg-green", fill: "fill-green" },
      "/insights": { bg: "bg-yellow", fill: "fill-yellow" },
      "/contact": { bg: "bg-pink", fill: "fill-pink" },
    };

    const applyTheme = (bgClass, fillClass) => {
      if (bgClass) {
        bgEl.className =
          `fixed inset-0 -z-10 pointer-events-none overflow-hidden ${bgClass} ` +
          `bg-[url('/images/blue-lines.png')] bg-cover bg-center bg-blend-color-burn`;
      }
      if (fillClass) {
        fillEls.forEach((el) => {
          el.classList.forEach((cls) => {
            if (cls.startsWith("fill-")) el.classList.remove(cls);
          });
          el.classList.add(fillClass);
        });
      }
    };

    const resetTheme = () => {
      const path = window.location.pathname.replace(/\/$/, "") || "/"; // fix trailing slash + root
      const activeLink = document.querySelector(`#nav-menu a[href="${path}"]`);
      if (activeLink) {
        applyTheme(activeLink.dataset.bg, activeLink.dataset.fill);
      } else if (themeMap[path]) {
        applyTheme(themeMap[path].bg, themeMap[path].fill);
      } else {
        // fallback to primary if unknown
        applyTheme("bg-primary", "fill-primary");
      }
    };

    navLinks.forEach((link) => {
      if (link.dataset.hoverBound) return; // avoid duplicate listeners
      link.dataset.hoverBound = "true";
      link.addEventListener("mouseenter", () =>
        applyTheme(link.dataset.bg, link.dataset.fill)
      );
      link.addEventListener("mouseleave", resetTheme);
    });

    resetTheme(); // correct colours on load
  };

  if (document.readyState !== "loading") {
    initNavHover();
  } else {
    document.addEventListener("DOMContentLoaded", initNavHover);
  }
  document.addEventListener("astro:page-load", initNavHover);
</script>
