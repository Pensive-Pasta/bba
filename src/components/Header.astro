---
import Logo from "./Logo.astro";
import PolicyArrow from "../assets/icons/Policy-Arrow.svg";

const navItems = [
  { name: "Work", url: "/projects", color: "text-orange" },
  { name: "Studio", url: "/practice", color: "text-green" },
  { name: "Insights", url: "/insights", color: "text-yellow" },
  { name: "Contact", url: "/contact", color: "text-pink" },
];

const currentRoute = Astro.url.pathname;
const isHome = currentRoute === "/";
const isContact = currentRoute === "/contact";
const isArticle = currentRoute.startsWith("/projects/homes/");

const currentYear = new Date().getFullYear();

const textColor = "text-primary";
---

<header
  id="site-header"
  class={`p-4 md:p-8 min-w-full fixed top-0 left-0 right-0 z-40 duration-300 ${
    textColor
  }`}
>
  <div class="flex justify-between items-center max-w-[1440px] mx-auto">
    <a
      href="/"
      class="text-xl font-light tracking-tighter z-40 header-link text-current"
    >
      <span class="header-text">
        <Logo class="logo" />
      </span>
    </a>

    <button class="z-40 relative" id="menu-toggle" aria-label="Toggle menu">
      <div class="w-10 h-8 flex flex-col justify-between overflow-hidden">
        <span
          class="w-full h-1 transform transition-all duration-300 origin-left menu-line-1 bg-current"
        ></span>
        <span
          class="w-full h-1 transition-all duration-300 origin-center menu-line-2 bg-current"
        ></span>
        <span
          class="w-full h-1 transform transition-all duration-300 origin-left menu-line-3 bg-current"
        ></span>
      </div>
    </button>
  </div>

  <div
    class="nav-menu px-4 md:px-8 fixed inset-0 min-h-screen w-screen z-30 hidden overflow-auto pt-[160px] pb-6 md:pb-8 max-w-[1440px] mx-auto"
    id="nav-menu"
  >
    <div
      id="nav-bg"
      class="fixed inset-0 -z-10 pointer-events-none overflow-hidden bg-[#178FE4]"
    >
    </div>
    <div class="flex flex-col items-center justify-between h-full">
      <div class="dot-grid w-full max-w-[600px] aspect-square">
        {
          navItems.map((item) => (
            <a
              href={item.url}
              class="group aspect-square flex items-start justify-start text-white p-4 text-2xl lg:text-4xl text-center"
            >
              <p class="relative group transition-transform duration-500 mt-1">
                {item.name}
                <span class="hidden lg:block absolute left-0 -bottom-1 w-0 h-[4px] bg-current transition-all duration-300 group-hover:w-full" />
              </p>
            </a>
          ))
        }
      </div>
      <div class="mb-1 w-full">
        <ul
          class="flex justify-between items-center text-white text-sm lg:text-lg transition-colors font-light"
        >
          <li>
            <p>
              &copy; {currentYear} Butcher Bayley Architects
            </p>
          </li>
          <li>
            <a class="flex items-center gap-2" href="/privacy">
              Our Privacy Policy
              <span class="inline-block text-white mt-1">
                <PolicyArrow class="w-6" />
              </span>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</header>

<script>
  const setupMobileMenu = () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("nav-menu");
    const body = document.body;
    const menuLine1 = document.querySelector(".menu-line-1");
    const menuLine2 = document.querySelector(".menu-line-2");
    const menuLine3 = document.querySelector(".menu-line-3");
    const logo = document.querySelector(".logo");

    if (!menuToggle || !mobileMenu) return;
    if (menuToggle.dataset.bound) return;
    menuToggle.dataset.bound = "true";

    const handleToggle = (e: { preventDefault: () => void }) => {
      e.preventDefault();
      mobileMenu.classList.toggle("hidden");
      body.classList.toggle("overflow-hidden");
      logo?.classList.toggle("text-white");
      logo?.classList.toggle("text-primary");

      menuLine1?.classList.toggle("rotate-45");
      menuLine1?.classList.toggle("translate-x-1");
      menuLine1?.classList.toggle("translate-y-[1px]");
      menuLine2?.classList.toggle("scale-x-0");
      menuLine3?.classList.toggle("-rotate-45");
      menuLine3?.classList.toggle("translate-x-1");
      menuLine1?.classList.toggle("!bg-white");
      menuLine2?.classList.toggle("!bg-white");
      menuLine3?.classList.toggle("!bg-white");
    };

    menuToggle.addEventListener("click", handleToggle);
    menuToggle.addEventListener("touchstart", handleToggle);
  };

  if (document.readyState !== "loading") {
    setupMobileMenu();
  } else {
    document.addEventListener("DOMContentLoaded", setupMobileMenu);
  }

  // Re-run on client-side navigation
  document.addEventListener("astro:page-load", setupMobileMenu);
</script>

<script>
  const setupScrollHeader = () => {
    const hero = document.getElementById("hero");
    const header = document.getElementById("site-header");

    if (!hero || !header) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          header.classList.add("text-white");
          header.classList.remove("text-primary");
          header.classList.add("bg-transparent");
          header.classList.remove("bg-white");
        } else {
          header.classList.add("text-primary");
          header.classList.remove("text-white");
          header.classList.add("bg-white");
          header.classList.remove("bg-transparent");
        }
      },
      {
        threshold: 0,
        rootMargin: `-${header.offsetHeight}px 0px 0px 0px`,
      }
    );

    observer.observe(hero);
  };

  if (document.readyState !== "loading") {
    setupScrollHeader();
  } else {
    document.addEventListener("DOMContentLoaded", setupScrollHeader);
  }

  document.addEventListener("astro:page-load", setupScrollHeader);
</script>

<script is:inline>
  const initNavHover = () => {
    const bgEl = document.getElementById("nav-bg");

    if (!bgEl) return;

    const applyTheme = () => {
      bgEl.className =
        "fixed inset-0 -z-10 pointer-events-none overflow-hidden bg-[#178FE4]";
    };

    const resetTheme = () => {
      applyTheme();
    };

    applyTheme(); // correct background on load
  };

  if (document.readyState !== "loading") {
    initNavHover();
  } else {
    document.addEventListener("DOMContentLoaded", initNavHover);
  }
  document.addEventListener("astro:page-load", initNavHover);
</script>
