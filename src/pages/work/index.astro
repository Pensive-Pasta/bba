---
import BaseLayout from "../../layouts/BaseLayout.astro";
import ProjectCard from "../../components/ProjectCard.astro";
import PageDotGrid from "../../components/PageDotGrid.astro";
import { sanity } from "../../lib/sanityClient";
import { getProjectsQuery, getWorkPageQuery } from "../../lib/queries";

const workPage = await sanity.fetch(getWorkPageQuery);
const projects = await sanity.fetch(getProjectsQuery);

export interface Project {
  title: string;
  slug: {
    current: string;
  };
  postCode: string;
  county: string;
  year: number;
  type: "urban" | "inter-urban" | "rural";
  imageUrl: string;
}
---

<BaseLayout title="Work">
  <!-- Work view -->
  <section>
    <PageDotGrid />
    <div
      class="flex px-4 md:px-8 pt-[200px] min-h-[60vh] max-w-[1600px] mx-auto"
    >
      <h1 class="w-1/2 text-3xl md:text-[40px] font-bold">
        {workPage.title}
      </h1>
      <p
        class="w-1/2 text-base md:text-2xl leading-normal text-primary mb-4 font-light pl-6 md:pl-8"
      >
        {workPage.description}
      </p>
    </div>
    <div class="flex items-center text-lg p-4 md:p-8 max-w-[1600px] mx-auto">
      <div
        class="filter-toggle-group w-full max-w-[700px] relative flex flex-nowrap whitespace-nowrap items-center justify-between md:justify-end sm:gap-2 border-2 border-primary rounded-full below-xs:text-xs text-sm md:text-lg"
      >
        <button
          class="filter-btn rounded-full px-2 sm:px-5 lg:px-14 py-2 active-filter min-w-[50px] sm:min-w-[68px] w-full"
          data-type="both">All</button
        >
        <button
          class="filter-btn transition-colors duration-300 rounded-full px-3 sm:px-5 lg:px-14 py-2 w-full"
          data-type="urban">Urban</button
        >
        <button
          class="filter-btn rounded-full px-3 sm:px-5 lg:px-14 py-2 w-full"
          data-type="inter-urban">Inter-Urban</button
        >
        <button
          class="filter-btn rounded-full px-3 sm:px-5 lg:px-14 py-2 w-full"
          data-type="rural">Rural</button
        >
        <span
          id="filter-indicator"
          class="absolute top-0 left-0 h-full rounded-full bg-primary transition-transform duration-300 ease-out pointer-events-none z-[-1]"
        ></span>
      </div>

      <div class="flex flex-row justify-end pl-3 group ml-auto">
        <button id="index-toggle">
          <div
            class="text-base md:text-lg relative z-10 flex items-center gap-2 transition-opacity duration-300 ease-in-out"
          >
            <span
              id="label-index"
              class="flex items-center gap-2 opacity-100 group-hover:scale-105 transition-all duration-300 ease-in-out"
            >
              <span class="hidden sm:inline">Index</span>
              <svg
                class="w-5 h-5 group-hover:scale-105 transition-all duration-300 ease-in-out"
                viewBox="0 0 20 20"
                fill="currentColor"><circle cx="10" cy="10" r="8"></circle></svg
              >
            </span>
            <span
              id="label-grid"
              class="items-center gap-2 opacity-0 transition-all duration-300 ease-in-out hidden group-hover:scale-105"
            >
              <div class="flex items-center gap-2">
                <span class="hidden sm:inline">Grid</span>
                <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor"
                  ><rect x="3" y="3" width="5" height="5"></rect><rect
                    x="12"
                    y="3"
                    width="5"
                    height="5"></rect><rect x="3" y="12" width="5" height="5"
                  ></rect><rect x="12" y="12" width="5" height="5"></rect></svg
                >
              </div>
            </span>
          </div>
        </button>
      </div>
    </div>

    <div
      class="project-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 transition-opacity duration-300 ease-in-out opacity-100 px-4 md:px-8 max-w-[1600px] mx-auto mb-4 md:mb-8"
    >
      {
        projects.map((project: Project) => (
          <div class="card" data-type={project.type}>
            <ProjectCard {...project} />
          </div>
        ))
      }
    </div>
  </section>

  <style>
    .active-filter {
      @apply text-white;
    }
  </style>

  <!-- index view -->
  <section
    id="project-index"
    class="hidden p-4 md:p-8 transition-opacity duration-300 ease-in-out opacity-0 max-w-[1600px] mx-auto overflow-auto"
  >
    <table class="w-full text-left">
      <thead>
        <tr class="text-base sm:text-lg font-bold">
          <th class="pb-2 cursor-pointer min-w-[100px]">
            Name
            <svg
              class="chevron-icon inline-block w-8 h-8 ml-1 mb-1 transition-transform duration-300 text-primary"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </th>
          <th class="pb-2 cursor-pointer min-w-[100px]">
            Code
            <svg
              class="chevron-icon inline-block w-8 h-8 ml-1 mb-1 transition-transform duration-300 text-primary"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </th>
          <th class="pb-2 cursor-pointer">
            County
            <svg
              class="chevron-icon inline-block w-8 h-8 ml-1 mb-1 transition-transform duration-300 text-primary"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"></path>
            </svg>
          </th>
        </tr>
      </thead>
      <tbody>
        {
          projects.map((project: Project) => (
            <tr class="text-sm sm:text-lg font-light">
              <td class="pr-2">
                <a href="#" class="">
                  {project.title}
                </a>
              </td>
              <td class="p-2">{project.postCode}</td>
              <td class="p-2 break-words">{project.county}</td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </section>
</BaseLayout>

<script is:inline>
  const initProjectToggle = () => {
    const btn = document.getElementById("index-toggle");
    const grid = document.querySelector(".project-grid");
    const indexTable = document.getElementById("project-index");
    const filterBtns = document.querySelectorAll(".filter-btn");
    if (!btn || !grid || !indexTable) return;
    if (btn.dataset.bound) return; // avoid duplicate listeners
    btn.dataset.bound = "true";

    const resetView = () => {
      grid.classList.remove("hidden");
      indexTable.classList.add("hidden");
      document
        .querySelector(".filter-toggle-group")
        ?.classList.remove("hidden");
    };

    // first paint
    resetView();

    btn?.addEventListener("click", () => {
      const isShowingIndex = indexTable.classList.contains("hidden");
      const filterGroup = document.querySelector(".filter-toggle-group");
      if (isShowingIndex) {
        grid.classList.remove("opacity-100");
        grid.classList.add("opacity-0");

        setTimeout(() => {
          grid.classList.add("hidden");
        }, 300);

        indexTable.classList.remove("hidden");
        requestAnimationFrame(() => {
          indexTable.classList.remove("opacity-0");
          indexTable.classList.add("opacity-100");
        });
        filterGroup?.classList.add("invisible");
        // Fade out "Index", fade in "Grid"
        btn.querySelector("#label-index").classList.add("opacity-0");
        setTimeout(() => {
          btn.querySelector("#label-index").classList.add("hidden");
          btn.querySelector("#label-grid").classList.remove("hidden");
          requestAnimationFrame(() => {
            btn.querySelector("#label-grid").classList.remove("opacity-0");
            btn.querySelector("#label-grid").classList.add("opacity-100");
          });
        }, 300);
      } else {
        indexTable.classList.add("opacity-0");
        indexTable.classList.remove("opacity-100");

        setTimeout(() => {
          indexTable.classList.add("hidden");
          grid.classList.remove("opacity-0");
          grid.classList.add("opacity-100");
          grid.classList.remove("hidden");
        }, 300);
        setTimeout(() => {
          filterGroup?.classList.remove("invisible");
        }, 300);
        // Fade out "Grid", fade in "Index"
        btn.querySelector("#label-grid").classList.add("opacity-0");
        setTimeout(() => {
          btn.querySelector("#label-grid").classList.add("hidden");
          btn.querySelector("#label-index").classList.remove("hidden");
          requestAnimationFrame(() => {
            btn.querySelector("#label-index").classList.remove("opacity-0");
            btn.querySelector("#label-index").classList.add("opacity-100");
          });
        }, 300);
      }
    });

    const updateFilter = (type) => {
      filterBtns.forEach((b) => b.classList.remove("active-filter"));
      document
        .querySelector(`.filter-btn[data-type="${type}"]`)
        ?.classList.add("active-filter");

      const cards = document.querySelectorAll(".project-grid .card");
      cards.forEach((card) => {
        const cardType = card.dataset.type;
        if (type === "both") {
          card.classList.remove("hidden");
        } else {
          card.classList.toggle("hidden", cardType !== type);
        }
      });
      // Move indicator to the new active button
      const newActiveBtn = document.querySelector(
        `.filter-btn[data-type="${type}"]`
      );
      moveIndicatorTo(newActiveBtn);
    };

    filterBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const type = btn.dataset.type;
        updateFilter(type);
      });
    });

    updateFilter("both");
    // Move indicator to the initial button
    const initialBtn = document.querySelector(`.filter-btn[data-type="both"]`);
    setTimeout(() => moveIndicatorTo(initialBtn), 0);

    // Reposition indicator on window resize
    window.addEventListener("resize", () => {
      const activeBtn = document.querySelector(".filter-btn.active-filter");
      if (activeBtn) moveIndicatorTo(activeBtn);
    });
  };

  // Indicator logic

  const moveIndicatorTo = (btn) => {
    const indicator = document.getElementById("filter-indicator");
    if (!indicator || !btn) return;
    const group = btn.closest(".filter-toggle-group");
    const groupRect = group.getBoundingClientRect();
    const btnRect = btn.getBoundingClientRect();

    const offsetLeft = btnRect.left - groupRect.left;
    const offsetWidth = btnRect.width;

    requestAnimationFrame(() => {
      indicator.style.width = `${offsetWidth}px`;
      indicator.style.transform = `translateX(${offsetLeft - 2}px)`;
    });
  };

  // run on first load
  if (document.readyState !== "loading") {
    initProjectToggle();
  } else {
    document.addEventListener("DOMContentLoaded", initProjectToggle);
  }

  // run again after every Astro SPA navigation
  document.addEventListener("astro:page-load", initProjectToggle);

  // Sorting chevrons logic for project index
  const initIndexSort = () => {
    const chevrons = document.querySelectorAll("#project-index .chevron-icon");
    let isAlphaSort = true;

    chevrons.forEach((chevron) => {
      chevron.closest("th")?.addEventListener("click", () => {
        const rows = Array.from(
          document.querySelectorAll("#project-index tbody tr")
        );
        const sorted = rows.sort((a, b) => {
          const textA =
            a.querySelector("td")?.innerText.trim().toLowerCase() || "";
          const textB =
            b.querySelector("td")?.innerText.trim().toLowerCase() || "";
          return isAlphaSort
            ? textB.localeCompare(textA)
            : textA.localeCompare(textB);
        });

        const tbody = document.querySelector("#project-index tbody");
        if (tbody) {
          tbody.innerHTML = "";
          sorted.forEach((row) => tbody.appendChild(row));
        }

        chevrons.forEach((icon) => {
          icon.style.transform = isAlphaSort
            ? "rotate(180deg)"
            : "rotate(0deg)";
        });

        isAlphaSort = !isAlphaSort;
      });
    });
  };

  // Add after-swap listener
  document.addEventListener("astro:after-swap", initIndexSort);

  // And call it on first load too
  if (document.readyState !== "loading") {
    initIndexSort();
  } else {
    document.addEventListener("DOMContentLoaded", initIndexSort);
  }
</script>
