---
import BaseLayout from "../layouts/BaseLayout.astro";
import ProjectCard from "../components/ProjectCard.astro";
import { sanity } from "../lib/sanityClient";
import { getHomePageQuery, getProjectsQuery } from "../lib/queries";

const home = await sanity.fetch(getHomePageQuery);
const projects = await sanity.fetch(getProjectsQuery);

// SEO
const metaTitle =
  home?.seo?.metaTitle || "Home | Butcher Bayley Architects (BBA)";
const metaDescription =
  home?.seo?.metaDescription ||
  "Sustainable architecture across urban, inter-urban and rural contexts by Butcher Bayley Architects (BBA).";

// Featured link (fallback to /studio)
const featuredHref = home?.featuredPage?.pageSlug
  ? `/${home.featuredPage.pageSlug.replace(/^\/+/, "")}`
  : "/studio";
const featuredLabel = home?.featuredPage?.pageTitle || "Studio";

// Dedupe projects by postcode (first project wins)
type Project = {
  title: string;
  postCode?: string;
  county?: string;
  type?: "urban" | "inter-urban" | "rural";
  slug: { current: string };
  imageUrl?: string;
};

const byPostcode = new Map<string, Project>();
for (const p of projects as Project[]) {
  if (p.postCode && !byPostcode.has(p.postCode)) byPostcode.set(p.postCode, p);
}

// Build grid cells from available postcodes
const MAX_CELLS = 16;
const codes = Array.from(byPostcode.keys()).slice(0, MAX_CELLS - 1);
codes.unshift(""); // first cell blank
---

<BaseLayout title={metaTitle} description={metaDescription}>
  <div class="flex min-h-screen">
    <!-- Left: Grid -->
    <div class="w-full md:w-1/2 dot-grid-right">
      <!-- Mobile version: show/hide alternating -->
      <div class="block md:hidden">
        {
          codes.map((code, i) => {
            const proj = code ? byPostcode.get(code) : undefined;
            const img = proj?.imageUrl
              ? `${proj.imageUrl}?w=800&h=800&fit=crop&auto=format&q=75`
              : undefined;

            return (
              <>
                <div class="grid-cell aspect-square text-xl text-primary-dot font-light relative overflow-hidden">
                  <span class="block p-4 text-2xl">{code}</span>
                  {i % 2 === 1 && proj && (
                    <div
                      class="absolute inset-0 opacity-0 pointer-events-none transition-opacity duration-500"
                      data-project-tile
                    >
                      <ProjectCard
                        title={proj.title}
                        postCode={code}
                        county={proj.county}
                        type={proj.type}
                        slug={proj.slug}
                        imageUrl={img}
                      />
                    </div>
                  )}
                </div>
                {i !== codes.length - 1 && (
                  <div class="row-divider block" aria-hidden="true" />
                )}
              </>
            );
          })
        }
      </div>

      <!-- Desktop version: show/show/hide/hide -->
      <div class="hidden md:grid md:grid-cols-2">
        {
          codes.map((code, i) => {
            const proj = code ? byPostcode.get(code) : undefined;
            const img = proj?.imageUrl
              ? `${proj.imageUrl}?w=800&h=800&fit=crop&auto=format&q=75`
              : undefined;

            return (
              <>
                <div class="grid-cell aspect-square text-xl text-primary-dot font-light relative overflow-hidden">
                  <span class="block p-4 text-2xl">{code}</span>
                  {(i - 1) % 4 < 2 && i > 0 && proj && (
                    <div
                      class="absolute inset-0 opacity-0 pointer-events-none transition-opacity duration-500"
                      data-project-tile
                    >
                      <ProjectCard
                        title={proj.title}
                        postCode={code}
                        county={proj.county}
                        type={proj.type}
                        slug={proj.slug}
                        imageUrl={img}
                      />
                    </div>
                  )}
                </div>

                {/* full-width divider AFTER every second item */}
                {i % 2 === 1 && i !== codes.length - 1 && (
                  <div
                    class="row-divider col-span-2 block"
                    aria-hidden="true"
                  />
                )}
              </>
            );
          })
        }
      </div>
    </div>

    <!-- Right: Copy -->
    <div
      class="w-full md:w-1/2 flex flex-col px-4 md:px-8 sticky top-0 self-start pt-[200px]"
    >
      <h1 class="font-future text-2xl md:text-4xl text-primary mb-4">
        {home?.title ?? "BBA is an inter-urban studio."}
      </h1>
      <p class="text-lg md:text-xl text-primary font-light break-words mb-4">
        {
          home?.intro ??
            "We make progressive places for living and working, learning and community."
        }
      </p>
      <a
        href={featuredHref}
        class="text-lg md:text-xl relative group w-fit mb-10"
      >
        &gt; {featuredLabel}
        <span
          class="hidden lg:block absolute left-0 -bottom-1 w-0 h-[4px] bg-primary transition-all duration-300 group-hover:w-full"
        ></span>
      </a>
    </div>
  </div>

  {/* Fade-in on intersection */}
  <script is:inline>
    const tiles = document.querySelectorAll("[data-project-tile]");
    const io = new IntersectionObserver(
      (entries) => {
        for (const e of entries) {
          if (!e.isIntersecting) continue;
          const el = e.target;
          el.classList.remove("pointer-events-none");
          requestAnimationFrame(() => el.classList.add("opacity-100"));
          io.unobserve(el);
        }
      },
      { rootMargin: "120px" }
    );
    tiles.forEach((t) => io.observe(t));
  </script>
</BaseLayout>
